name: Build and Push

on:
  schedule:
    - cron: '0 0 * * *'  # Run daily at midnight
  workflow_dispatch:     # Allow manual triggering

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}
  ORG_NAME: thundersquared
  PACKAGE_NAME: liquidctl-docker

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    
    steps:
      - name: Check latest version and existing image
        id: version-check
        run: |
          # Get the latest release tag
          LATEST=$(curl -s https://api.github.com/repos/liquidctl/liquidctl/releases/latest | jq -r '.tag_name')
          # Remove v prefix if present
          VERSION=${LATEST#v}
          echo "Latest version: $VERSION"
          
          # Set version output
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          
          # Use GitHub API to check if the package version exists without downloading it
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" \
            -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/orgs/${{ env.ORG_NAME }}/packages/container/${{ env.PACKAGE_NAME }}/versions")
            
          if [ "$STATUS" = "200" ]; then
            # Package exists, check if this specific tag exists
            TAGS=$(curl -s \
              -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
              "https://api.github.com/orgs/${{ env.ORG_NAME }}/packages/container/${{ env.PACKAGE_NAME }}/versions" | \
              jq -r '.[].metadata.container.tags[]' | grep -w "$VERSION" || echo "")
              
            if [ -n "$TAGS" ]; then
              echo "Image tag $VERSION already exists, skipping build"
              echo "exists=true" >> $GITHUB_OUTPUT
            else
              echo "Image tag $VERSION does not exist, will build"
              echo "exists=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Package does not exist or API error, will attempt to build"
            echo "exists=false" >> $GITHUB_OUTPUT
          fi

      - name: Check out the repository
        if: steps.version-check.outputs.exists != 'true'
        uses: actions/checkout@v4.2.2

      - name: Set up Docker Buildx
        if: steps.version-check.outputs.exists != 'true'
        uses: docker/setup-buildx-action@v3.10.0

      - name: Log in to GitHub Container Registry
        if: steps.version-check.outputs.exists != 'true'
        uses: docker/login-action@v3.4.0
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        if: steps.version-check.outputs.exists != 'true'
        id: meta
        uses: docker/metadata-action@v5.7.0
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

      - name: Build and push Docker image
        if: steps.version-check.outputs.exists != 'true'
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ steps.version-check.outputs.version }}
            ${{ steps.meta.outputs.tags }}
          labels: |
            org.opencontainers.image.source=https://github.com/${{ env.IMAGE_NAME }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.version=${{ steps.version-check.outputs.version }}
